



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Chat_common.h"

namespace ChatC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId) PN_SEALED; 
	virtual bool Login_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)   PN_SEALED;  
	virtual bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg) PN_SEALED; 
	virtual bool SendMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & destUniqueID, const Proud::String & msg)   PN_SEALED;  
	virtual bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg) PN_SEALED; 
	virtual bool ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & msg)   PN_SEALED;  
	virtual bool ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) PN_SEALED; 
	virtual bool ChannelJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)   PN_SEALED;  
	virtual bool ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) PN_SEALED; 
	virtual bool ChannelLeave ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)   PN_SEALED;  
	virtual bool GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GetChannelList_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_Login_Request;
static const PNTCHAR* RmiName_SendMsg;
static const PNTCHAR* RmiName_ChannelMsg;
static const PNTCHAR* RmiName_ChannelJoin;
static const PNTCHAR* RmiName_ChannelLeave;
static const PNTCHAR* RmiName_GetChannelList_Request;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace ChatS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg) PN_SEALED; 
	virtual bool Login_Response ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)   PN_SEALED;  
	virtual bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg) PN_SEALED; 
	virtual bool SendMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & srcUniqueID, const Proud::String & msg)   PN_SEALED;  
	virtual bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg) PN_SEALED; 
	virtual bool ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)   PN_SEALED;  
	virtual bool GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList) PN_SEALED; 
	virtual bool GetChannelList_Response ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)   PN_SEALED;  
	virtual bool Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering) PN_SEALED; 
	virtual bool Event_Filtering ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & filtering)   PN_SEALED;  
	virtual bool Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context) PN_SEALED; 
	virtual bool Event_Notice ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & context)   PN_SEALED;  
static const PNTCHAR* RmiName_Login_Response;
static const PNTCHAR* RmiName_SendMsg;
static const PNTCHAR* RmiName_ChannelMsg;
static const PNTCHAR* RmiName_GetChannelList_Response;
static const PNTCHAR* RmiName_Event_Filtering;
static const PNTCHAR* RmiName_Event_Notice;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



