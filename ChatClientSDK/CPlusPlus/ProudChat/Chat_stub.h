  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "Chat_common.h"

     
namespace ChatC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool Login_Request ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_Login_Request bool Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId) PN_OVERRIDE

#define DEFRMI_ChatC2S_Login_Request(DerivedClass) bool DerivedClass::Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
#define CALL_ChatC2S_Login_Request Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
#define PARAM_ChatC2S_Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)
               
		virtual bool SendMsg ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_SendMsg bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_ChatC2S_SendMsg(DerivedClass) bool DerivedClass::SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg)
#define CALL_ChatC2S_SendMsg SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg)
#define PARAM_ChatC2S_SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg)
               
		virtual bool ChannelMsg ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_ChannelMsg bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_ChatC2S_ChannelMsg(DerivedClass) bool DerivedClass::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)
#define CALL_ChatC2S_ChannelMsg ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)
#define PARAM_ChatC2S_ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)
               
		virtual bool ChannelJoin ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_ChannelJoin bool ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) PN_OVERRIDE

#define DEFRMI_ChatC2S_ChannelJoin(DerivedClass) bool DerivedClass::ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
#define CALL_ChatC2S_ChannelJoin ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
#define PARAM_ChatC2S_ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
               
		virtual bool ChannelLeave ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_ChannelLeave bool ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) PN_OVERRIDE

#define DEFRMI_ChatC2S_ChannelLeave(DerivedClass) bool DerivedClass::ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
#define CALL_ChatC2S_ChannelLeave ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
#define PARAM_ChatC2S_ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)
               
		virtual bool GetChannelList_Request ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_ChatC2S_GetChannelList_Request bool GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_ChatC2S_GetChannelList_Request(DerivedClass) bool DerivedClass::GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_ChatC2S_GetChannelList_Request GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_ChatC2S_GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Login_Request;
		static const PNTCHAR* RmiName_SendMsg;
		static const PNTCHAR* RmiName_ChannelMsg;
		static const PNTCHAR* RmiName_ChannelJoin;
		static const PNTCHAR* RmiName_ChannelLeave;
		static const PNTCHAR* RmiName_GetChannelList_Request;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & ) > Login_Request_Function;
		virtual bool Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId) 
		{ 
			if (Login_Request_Function==nullptr) 
				return true; 
			return Login_Request_Function(remote,rmiContext, ownerUuid, projectUuid, uniqueId); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & ) > SendMsg_Function;
		virtual bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg) 
		{ 
			if (SendMsg_Function==nullptr) 
				return true; 
			return SendMsg_Function(remote,rmiContext, destUniqueID, msg); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & ) > ChannelMsg_Function;
		virtual bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg) 
		{ 
			if (ChannelMsg_Function==nullptr) 
				return true; 
			return ChannelMsg_Function(remote,rmiContext, channelKey, msg); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > ChannelJoin_Function;
		virtual bool ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) 
		{ 
			if (ChannelJoin_Function==nullptr) 
				return true; 
			return ChannelJoin_Function(remote,rmiContext, channelKey); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > ChannelLeave_Function;
		virtual bool ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey) 
		{ 
			if (ChannelLeave_Function==nullptr) 
				return true; 
			return ChannelLeave_Function(remote,rmiContext, channelKey); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GetChannelList_Request_Function;
		virtual bool GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GetChannelList_Request_Function==nullptr) 
				return true; 
			return GetChannelList_Request_Function(remote,rmiContext); 
		}

	};
#endif

}


     
namespace ChatS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool Login_Response ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_Login_Response bool Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_ChatS2C_Login_Response(DerivedClass) bool DerivedClass::Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)
#define CALL_ChatS2C_Login_Response Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)
#define PARAM_ChatS2C_Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)
               
		virtual bool SendMsg ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_SendMsg bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_ChatS2C_SendMsg(DerivedClass) bool DerivedClass::SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg)
#define CALL_ChatS2C_SendMsg SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg)
#define PARAM_ChatS2C_SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg)
               
		virtual bool ChannelMsg ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_ChannelMsg bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg) PN_OVERRIDE

#define DEFRMI_ChatS2C_ChannelMsg(DerivedClass) bool DerivedClass::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)
#define CALL_ChatS2C_ChannelMsg ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)
#define PARAM_ChatS2C_ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)
               
		virtual bool GetChannelList_Response ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & , const Proud::CFastArray<Proud::String> & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_GetChannelList_Response bool GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList) PN_OVERRIDE

#define DEFRMI_ChatS2C_GetChannelList_Response(DerivedClass) bool DerivedClass::GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)
#define CALL_ChatS2C_GetChannelList_Response GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)
#define PARAM_ChatS2C_GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)
               
		virtual bool Event_Filtering ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_Event_Filtering bool Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering) PN_OVERRIDE

#define DEFRMI_ChatS2C_Event_Filtering(DerivedClass) bool DerivedClass::Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering)
#define CALL_ChatS2C_Event_Filtering Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering)
#define PARAM_ChatS2C_Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering)
               
		virtual bool Event_Notice ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatS2C_Event_Notice bool Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context) PN_OVERRIDE

#define DEFRMI_ChatS2C_Event_Notice(DerivedClass) bool DerivedClass::Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context)
#define CALL_ChatS2C_Event_Notice Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context)
#define PARAM_ChatS2C_Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Login_Response;
		static const PNTCHAR* RmiName_SendMsg;
		static const PNTCHAR* RmiName_ChannelMsg;
		static const PNTCHAR* RmiName_GetChannelList_Response;
		static const PNTCHAR* RmiName_Event_Filtering;
		static const PNTCHAR* RmiName_Event_Notice;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & , const Proud::String & , const Proud::String & ) > Login_Response_Function;
		virtual bool Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg) 
		{ 
			if (Login_Response_Function==nullptr) 
				return true; 
			return Login_Response_Function(remote,rmiContext, errorType, filtering, msg); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & ) > SendMsg_Function;
		virtual bool SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg) 
		{ 
			if (SendMsg_Function==nullptr) 
				return true; 
			return SendMsg_Function(remote,rmiContext, srcUniqueID, msg); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & ) > ChannelMsg_Function;
		virtual bool ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg) 
		{ 
			if (ChannelMsg_Function==nullptr) 
				return true; 
			return ChannelMsg_Function(remote,rmiContext, channelKey, srcUniqueID, msg); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & , const Proud::CFastArray<Proud::String> & ) > GetChannelList_Response_Function;
		virtual bool GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList) 
		{ 
			if (GetChannelList_Response_Function==nullptr) 
				return true; 
			return GetChannelList_Response_Function(remote,rmiContext, errorType, channelList); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > Event_Filtering_Function;
		virtual bool Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering) 
		{ 
			if (Event_Filtering_Function==nullptr) 
				return true; 
			return Event_Filtering_Function(remote,rmiContext, filtering); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > Event_Notice_Function;
		virtual bool Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context) 
		{ 
			if (Event_Notice_Function==nullptr) 
				return true; 
			return Event_Notice_Function(remote,rmiContext, context); 
		}

	};
#endif

}


