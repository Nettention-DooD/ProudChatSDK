




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Chat_proxy.h"

namespace ChatC2S {


        
	bool Proxy::Login_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Request;
__msg.Write(__msgid); 
	
__msg << ownerUuid;
__msg << projectUuid;
__msg << uniqueId;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Login_Request, (::Proud::RmiID)Rmi_Login_Request);
	}

	bool Proxy::Login_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & ownerUuid, const Proud::String & projectUuid, const Proud::String & uniqueId)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Request;
__msg.Write(__msgid); 
	
__msg << ownerUuid;
__msg << projectUuid;
__msg << uniqueId;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Login_Request, (::Proud::RmiID)Rmi_Login_Request);
	}
        
	bool Proxy::SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & destUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMsg;
__msg.Write(__msgid); 
	
__msg << destUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendMsg, (::Proud::RmiID)Rmi_SendMsg);
	}

	bool Proxy::SendMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & destUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMsg;
__msg.Write(__msgid); 
	
__msg << destUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendMsg, (::Proud::RmiID)Rmi_SendMsg);
	}
        
	bool Proxy::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}

	bool Proxy::ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}
        
	bool Proxy::ChannelJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelJoin, (::Proud::RmiID)Rmi_ChannelJoin);
	}

	bool Proxy::ChannelJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelJoin;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelJoin, (::Proud::RmiID)Rmi_ChannelJoin);
	}
        
	bool Proxy::ChannelLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelLeave, (::Proud::RmiID)Rmi_ChannelLeave);
	}

	bool Proxy::ChannelLeave ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelLeave;
__msg.Write(__msgid); 
	
__msg << channelKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelLeave, (::Proud::RmiID)Rmi_ChannelLeave);
	}
        
	bool Proxy::GetChannelList_Request ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Request;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GetChannelList_Request, (::Proud::RmiID)Rmi_GetChannelList_Request);
	}

	bool Proxy::GetChannelList_Request ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Request;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GetChannelList_Request, (::Proud::RmiID)Rmi_GetChannelList_Request);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Login_Request =_PNT("Login_Request");
#else
const PNTCHAR* Proxy::RmiName_Login_Request =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendMsg =_PNT("SendMsg");
#else
const PNTCHAR* Proxy::RmiName_SendMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("ChannelMsg");
#else
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelJoin =_PNT("ChannelJoin");
#else
const PNTCHAR* Proxy::RmiName_ChannelJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelLeave =_PNT("ChannelLeave");
#else
const PNTCHAR* Proxy::RmiName_ChannelLeave =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GetChannelList_Request =_PNT("GetChannelList_Request");
#else
const PNTCHAR* Proxy::RmiName_GetChannelList_Request =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Login_Request;

}


namespace ChatS2C {


        
	bool Proxy::Login_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << filtering;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Login_Response, (::Proud::RmiID)Rmi_Login_Response);
	}

	bool Proxy::Login_Response ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::String & filtering, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Login_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << filtering;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Login_Response, (::Proud::RmiID)Rmi_Login_Response);
	}
        
	bool Proxy::SendMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & srcUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMsg;
__msg.Write(__msgid); 
	
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendMsg, (::Proud::RmiID)Rmi_SendMsg);
	}

	bool Proxy::SendMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & srcUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMsg;
__msg.Write(__msgid); 
	
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendMsg, (::Proud::RmiID)Rmi_SendMsg);
	}
        
	bool Proxy::ChannelMsg ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}

	bool Proxy::ChannelMsg ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & channelKey, const Proud::String & srcUniqueID, const Proud::String & msg)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ChannelMsg;
__msg.Write(__msgid); 
	
__msg << channelKey;
__msg << srcUniqueID;
__msg << msg;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ChannelMsg, (::Proud::RmiID)Rmi_ChannelMsg);
	}
        
	bool Proxy::GetChannelList_Response ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << channelList;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GetChannelList_Response, (::Proud::RmiID)Rmi_GetChannelList_Response);
	}

	bool Proxy::GetChannelList_Response ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::CFastArray<Proud::String> & channelList)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GetChannelList_Response;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << channelList;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GetChannelList_Response, (::Proud::RmiID)Rmi_GetChannelList_Response);
	}
        
	bool Proxy::Event_Filtering ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & filtering)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Filtering;
__msg.Write(__msgid); 
	
__msg << filtering;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Event_Filtering, (::Proud::RmiID)Rmi_Event_Filtering);
	}

	bool Proxy::Event_Filtering ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & filtering)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Filtering;
__msg.Write(__msgid); 
	
__msg << filtering;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Event_Filtering, (::Proud::RmiID)Rmi_Event_Filtering);
	}
        
	bool Proxy::Event_Notice ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & context)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Notice;
__msg.Write(__msgid); 
	
__msg << context;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Event_Notice, (::Proud::RmiID)Rmi_Event_Notice);
	}

	bool Proxy::Event_Notice ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & context)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Event_Notice;
__msg.Write(__msgid); 
	
__msg << context;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Event_Notice, (::Proud::RmiID)Rmi_Event_Notice);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Login_Response =_PNT("Login_Response");
#else
const PNTCHAR* Proxy::RmiName_Login_Response =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendMsg =_PNT("SendMsg");
#else
const PNTCHAR* Proxy::RmiName_SendMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("ChannelMsg");
#else
const PNTCHAR* Proxy::RmiName_ChannelMsg =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GetChannelList_Response =_PNT("GetChannelList_Response");
#else
const PNTCHAR* Proxy::RmiName_GetChannelList_Response =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Event_Filtering =_PNT("Event_Filtering");
#else
const PNTCHAR* Proxy::RmiName_Event_Filtering =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Event_Notice =_PNT("Event_Notice");
#else
const PNTCHAR* Proxy::RmiName_Event_Notice =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Login_Response;

}



